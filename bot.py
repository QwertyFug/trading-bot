import telebot
from telebot import types
import sqlite3
import random
import time
import os
import requests
import hashlib
import hmac
from flask import Flask, request, jsonify
from threading import Thread

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
BOT_TOKEN = os.environ.get('BOT_TOKEN', '8217857626:AAFePmaExR-7Zr50GtJKZ-1B7ZQ9hVLNYoQ')
CHANNEL_USERNAME = "@SKOLix_group"
SUPPORT_USERNAME = "@Noinbro"
ADMIN_ID = int(os.environ.get('ADMIN_ID', '6313032412'))
BOT_USERNAME = "TradingProiabot"
POCKET_OPTION_AFFILIATE_URL = "https://u3.shortink.io/register?utm_campaign=829188&utm_source=affiliate&utm_medium=sr&a=ln3hvKaiGy3DGT&ac=trading2&code=WELCOME50"
POSTBACK_SECRET = os.environ.get('POSTBACK_SECRET', 'swill_secret_2025')

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

print("ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ Railway...")

# ===== POSTBACK 2.0 HANDLER =====
@app.route('/pocket-webhook', methods=['GET', 'POST'])
def pocket_webhook():
    try:
        print("üîÑ –ü–æ–ª—É—á–µ–Ω Postback 2.0 –∑–∞–ø—Ä–æ—Å")
        
        if request.method == 'GET':
            data = request.args
        else:
            data = request.json or request.form
        
        print(f"üì® –î–∞–Ω–Ω—ã–µ: {dict(data)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        signature = data.get('signature')
        if not verify_signature(data, signature):
            return jsonify({"status": "error", "message": "Invalid signature"}), 403
        
        user_id = data.get('sub1')
        deposit_amount = data.get('deposit') or data.get('sum')
        
        if not user_id or not deposit_amount:
            return jsonify({"status": "error", "message": "Missing data"}), 400
        
        try:
            user_id = int(user_id)
            deposit_amount = float(deposit_amount)
        except (ValueError, TypeError):
            return jsonify({"status": "error", "message": "Invalid data"}), 400
        
        if deposit_amount < 5.5:
            return jsonify({"status": "success", "message": "Deposit too small"}), 200
        
        # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE users 
            SET verified_at = CURRENT_TIMESTAMP, 
                deposit_amount = ?,
                pocket_uid = ?
            WHERE user_id = ?
        ''', (deposit_amount, f"pocket_{user_id}", user_id))
        
        if cursor.rowcount > 0:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            
            try:
                bot.send_message(
                    user_id, 
                    f"üéâ –í–ê–® –ê–ö–ö–ê–£–ù–¢ –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù!\n\n"
                    f"‚úÖ –î–µ–ø–æ–∑–∏—Ç: ${deposit_amount}\n"
                    f"üöÄ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã!"
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            update_referral_system(user_id)
        
        conn.commit()
        conn.close()
        
        return jsonify({"status": "success", "message": "User verified"}), 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ postback: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def verify_signature(data, signature):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Postback 2.0"""
    try:
        sorted_params = sorted([(k, v) for k, v in data.items() if k != 'signature'])
        message = ''.join([f"{k}{v}" for k, v in sorted_params])
        
        expected_signature = hmac.new(
            POSTBACK_SECRET.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(expected_signature, signature)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = Thread(target=run_flask, daemon=True)
flask_thread.start()

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è Railway
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                subscribed INTEGER DEFAULT 0,
                signals_count INTEGER DEFAULT 0,
                reg_date TEXT DEFAULT CURRENT_TIMESTAMP,
                last_currency TEXT DEFAULT 'EUR/USD',
                rank TEXT DEFAULT 'ü•ö –ù–æ–≤–∏—á–æ–∫',
                referrer_id INTEGER DEFAULT 0,
                referrals_count INTEGER DEFAULT 0,
                coins INTEGER DEFAULT 0,
                pocket_uid TEXT,
                verified_at TEXT,
                deposit_amount REAL DEFAULT 0,
                is_admin INTEGER DEFAULT 0,
                welcome_shown INTEGER DEFAULT 0,
                last_active TEXT DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (ADMIN_ID,))
        if not cursor.fetchone():
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, is_admin, verified_at, subscribed, welcome_shown, last_active)
                VALUES (?, 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 1, CURRENT_TIMESTAMP, 1, 1, CURRENT_TIMESTAMP)
            ''', (ADMIN_ID,))
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

init_db()

# ===== –°–ò–°–¢–ï–ú–ê –†–ê–ù–ì–û–í =====
RANKS = {
    0: {"name": "ü•ö –ù–æ–≤–∏—á–æ–∫", "min_trades": 0},
    5: {"name": "üê£ –£—á–µ–Ω–∏–∫", "min_trades": 5},
    10: {"name": "üê• –û–ø—ã—Ç–Ω—ã–π", "min_trades": 10},
    20: {"name": "üêì –≠–∫—Å–ø–µ—Ä—Ç", "min_trades": 20},
    30: {"name": "ü¶Ö –ú–∞—Å—Ç–µ—Ä", "min_trades": 30}
}

def get_user_rank(signals_count):
    for min_trades, rank_info in sorted(RANKS.items(), reverse=True):
        if signals_count >= min_trades:
            return rank_info["name"]
    return "ü•ö –ù–æ–≤–∏—á–æ–∫"

# ===== –í–ê–õ–Æ–¢–ù–´–ï –ü–ê–†–´ =====
CURRENCY_PAIRS = {
    "EUR/USD": "üá™üá∫üá∫üá∏ EUR/USD OTC",
    "GBP/USD": "üá¨üáßüá∫üá∏ GBP/USD OTC", 
    "USD/JPY": "üá∫üá∏üáØüáµ USD/JPY OTC",
    "AUD/USD": "üá¶üá∫üá∫üá∏ AUD/USD OTC",
    "USD/CAD": "üá∫üá∏üá®üá¶ USD/CAD OTC",
    "USD/CHF": "üá∫üá∏üá®üá≠ USD/CHF OTC",
    "EUR/GBP": "üá™üá∫üá¨üáß EUR/GBP OTC",
    "GBP/JPY": "üá¨üáßüáØüáµ GBP/JPY OTC"
}

TIMEFRAMES = {
    "10s": "‚ö° 10 —Å–µ–∫—É–Ω–¥",
    "30s": "üéØ 30 —Å–µ–∫—É–Ω–¥", 
    "60s": "‚è∞ 1 –º–∏–Ω—É—Ç–∞"
}

# ===== –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò =====
def check_subscription(user_id):
    try:
        chat_member = bot.get_chat_member(CHANNEL_USERNAME, user_id)
        is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
        
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET subscribed = ? WHERE user_id = ?', (1 if is_subscribed else 0, user_id))
        conn.commit()
        conn.close()
        
        return is_subscribed
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ===== –ü–†–û–í–ï–†–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò =====
def check_pocket_verification(user_id):
    if user_id == ADMIN_ID:
        return True
        
    conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT verified_at, deposit_amount FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    
    return result and result[0] and result[1] >= 5.5

# ===== –î–ï–ö–û–†–ê–¢–û–† –î–û–°–¢–£–ü–ê =====
def require_verification(func):
    def wrapper(*args, **kwargs):
        try:
            user_id = None
            if isinstance(args[0], types.CallbackQuery):
                user_id = args[0].from_user.id
            elif isinstance(args[0], types.Message):
                user_id = args[0].from_user.id
            
            if not user_id:
                return
                
            if user_id == ADMIN_ID:
                return func(*args, **kwargs)
            
            if not check_subscription(user_id):
                if isinstance(args[0], types.CallbackQuery):
                    bot.answer_callback_query(args[0].id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!")
                    show_subscription_request(args[0].message)
                else:
                    show_subscription_request(args[0])
                return
            
            if not check_pocket_verification(user_id):
                if isinstance(args[0], types.CallbackQuery):
                    bot.answer_callback_query(args[0].id, "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Pocket Option!")
                    show_verification_instructions(args[0].message, user_id)
                else:
                    show_verification_instructions(args[0], user_id)
                return
            
            return func(*args, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ: {e}")
    return wrapper

# ===== –ú–ï–ù–Æ =====
def main_menu(user_id=None):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    show_welcome = False
    if user_id and user_id != ADMIN_ID:
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('SELECT welcome_shown FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result and not result[0]:
            show_welcome = True
            cursor.execute('UPDATE users SET welcome_shown = 1 WHERE user_id = ?', (user_id,))
            conn.commit()
        conn.close()
    
    channel_link = f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}"
    support_link = f"https://t.me/{SUPPORT_USERNAME.replace('@', '')}"
    
    buttons = [
        types.InlineKeyboardButton("üéØ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"),
        types.InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
        types.InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_program"),
        types.InlineKeyboardButton("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions"),
        types.InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=channel_link),
        types.InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link)
    ]
    
    markup.add(buttons[0], buttons[1])
    markup.add(buttons[2], buttons[3])
    markup.add(buttons[4], buttons[5])
    
    if user_id == ADMIN_ID:
        markup.add(types.InlineKeyboardButton("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞", callback_data="admin_panel"))
    
    return markup, show_welcome

# ===== –ì–ï–ù–ï–†–ê–¢–û–† –°–ò–ì–ù–ê–õ–û–í =====
def generate_signal(currency, timeframe):
    direction = random.choice(["BUY", "SELL"])
    confidence = random.randint(68, 87)
    
    if direction == "BUY":
        signal_emoji = "üü¢"
        direction_text = "–í–í–ï–†–•"
    else:
        signal_emoji = "üî¥" 
        direction_text = "–í–ù–ò–ó"
    
    return f"""
{signal_emoji} –°–ò–ì–ù–ê–õ {signal_emoji}

üìä –ü–∞—Ä–∞: {CURRENCY_PAIRS[currency]}
‚è∞ –í—Ä–µ–º—è: {TIMEFRAMES[timeframe]}
üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {confidence}%
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_text} {signal_emoji}

üöÄ –£–¥–∞—á–∏ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ!
"""

# ===== –ò–ù–°–¢–†–£–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò =====
def show_verification_instructions(message, user_id):
    affiliate_url = f"{POCKET_OPTION_AFFILIATE_URL}&sub1={user_id}"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üåê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Pocket Option", url=affiliate_url))
    
    instruction_text = f"""
üìã –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–û–°–¢–£–ü–ê –ö –°–ò–ì–ù–ê–õ–ê–ú:

1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Pocket Option¬ª
2. –°–æ–∑–¥–∞–π—Ç–µ –ù–û–í–´–ô –∞–∫–∫–∞—É–Ω—Ç –ø–æ –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–µ
3. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –Ω–∞ 500 —Ä—É–±–ª–µ–π (‚âà$5.5) –∏–ª–∏ –±–æ–ª–µ–µ
4. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã

üéØ –í–∞—à ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {user_id}
"""
    bot.send_message(message.chat.id, instruction_text, reply_markup=markup)

def show_subscription_request(message):
    markup = types.InlineKeyboardMarkup()
    channel_link = f"https://t.me/{CHANNEL_USERNAME.replace('@', '')}"
    markup.add(types.InlineKeyboardButton("üì¢ –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø –ù–ê –ö–ê–ù–ê–õ", url=channel_link))
    markup.add(types.InlineKeyboardButton("‚úÖ –Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø", callback_data="check_subscription"))
    
    bot.send_message(message.chat.id, 
                   f"‚ùå –î–û–°–¢–£–ü –ó–ê–ö–†–´–¢\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n{CHANNEL_USERNAME}", 
                   reply_markup=markup)

def update_referral_system(user_id):
    try:
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT verified_at FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result and result[0]:
            cursor.execute('SELECT referrer_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            
            if result and result[0]:
                referrer_id = result[0]
                cursor.execute('UPDATE users SET referrals_count = referrals_count + 1, coins = coins + 10 WHERE user_id = ?', (referrer_id,))
                
                try:
                    cursor.execute('SELECT coins FROM users WHERE user_id = ?', (referrer_id,))
                    coins_result = cursor.fetchone()
                    coins_balance = coins_result[0] if coins_result else 0
                    
                    bot.send_message(referrer_id, 
                                   f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!\n"
                                   f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +10 –º–æ–Ω–µ—Ç!\n"
                                   f"üìä –í–∞—à –±–∞–ª–∞–Ω—Å: {coins_balance} –º–æ–Ω–µ—Ç")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {e}")
        
        conn.commit()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")

# ===== –ö–û–ú–ê–ù–î–ê /start =====
@bot.message_handler(commands=['start'])
def start_cmd(message):
    try:
        user_id = message.from_user.id
        name = message.from_user.first_name
        
        print(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} (ID: {user_id})")
        
        referrer_id = None
        if len(message.text.split()) > 1:
            ref_code = message.text.split()[1]
            if ref_code.isdigit():
                referrer_id = int(ref_code)
        
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        existing_user = cursor.fetchone()
        
        if not existing_user:
            cursor.execute('''
                INSERT INTO users (user_id, username, first_name, reg_date, referrer_id, last_active) 
                VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?, CURRENT_TIMESTAMP)
            ''', (user_id, message.from_user.username, name, referrer_id))
        
        conn.commit()
        conn.close()
        
        if user_id == ADMIN_ID:
            markup, show_welcome = main_menu(user_id)
            bot.send_message(message.chat.id, "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=markup)
            return
        
        if not check_subscription(user_id):
            show_subscription_request(message)
            return
        
        if not check_pocket_verification(user_id):
            show_verification_instructions(message, user_id)
            return
        
        markup, show_welcome = main_menu(user_id)
        
        if show_welcome:
            welcome_text = f"üéâ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨, {name}!"
            bot.send_message(message.chat.id, welcome_text, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription_callback(call):
    try:
        user_id = call.from_user.id
        
        if check_subscription(user_id):
            bot.answer_callback_query(call.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            show_verification_instructions(call.message, user_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "get_signal")
@require_verification
def get_signal_callback(call):
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("üá™üá∫üá∫üá∏ EUR/USD", callback_data="currency_EUR/USD"),
            types.InlineKeyboardButton("üá¨üáßüá∫üá∏ GBP/USD", callback_data="currency_GBP/USD"),
            types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        markup.add(buttons[0], buttons[1])
        markup.add(buttons[2])
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("currency_"))
@require_verification
def currency_selected(call):
    try:
        currency = call.data.replace("currency_", "")
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("‚ö° 10 —Å–µ–∫—É–Ω–¥", callback_data=f"timeframe_{currency}_10s"),
            types.InlineKeyboardButton("üéØ 30 —Å–µ–∫—É–Ω–¥", callback_data=f"timeframe_{currency}_30s"),
            types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
        markup.add(buttons[0], buttons[1])
        markup.add(buttons[2])
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üéØ –í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞: {CURRENCY_PAIRS[currency]}\n\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("timeframe_"))
@require_verification
def timeframe_selected(call):
    try:
        data_parts = call.data.replace("timeframe_", "").split("_")
        currency = data_parts[0]
        timeframe = data_parts[1]
        
        signal = generate_signal(currency, timeframe)
        
        user_id = call.from_user.id
        conn = sqlite3.connect('/tmp/bot_users.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET signals_count = signals_count + 1 WHERE user_id = ?', (user_id,))
        
        cursor.execute('SELECT signals_count FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        if result:
            signals_count = result[0]
            new_rank = get_user_rank(signals_count)
            cursor.execute('UPDATE users SET rank = ? WHERE user_id = ?', (new_rank, user_id))
        
        conn.commit()
        conn.close()
        
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, signal)
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìà –ï—â–µ —Å–∏–≥–Ω–∞–ª", callback_data="get_signal"))
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        bot.send_message(call.message.chat.id, "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
@require_verification
def main_menu_callback(call):
    try:
        markup, show_welcome = main_menu(call.from_user.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=markup
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –Ω–∞ Railway...")
    print(f"üîß –ü–æ—Ä—Ç: {os.environ.get('PORT', '5000')}")
    print(f"üëë –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    
    # –î–∞–µ–º –≤—Ä–µ–º—è Flask –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)
    
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
